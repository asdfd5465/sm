name: Android Release Build and Sign

on:
  workflow_dispatch: # Allows manual triggering
  # push:
    # branches: [ main ] # Or your default branch - consider changing for release
    # tags:
      # - 'v*.*.*'      # Trigger on version tags like v1.0.0, v1.0.1

jobs:
  build_and_sign_release:
    name: Build Signed Release APK
    runs-on: ubuntu-latest
    # Optional: Condition to run only on manual dispatch or tags
    # if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # To get version name from git tag if you implement that later

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # THIS STEP IS KEPT AS IS, PER YOUR INSTRUCTION
      - name: Set up Android SDK
        run: |
          echo "ANDROID_SDK_ROOT=${HOME}/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=${HOME}/android-sdk" >> $GITHUB_ENV # Legacy
          SDK_CMD_TOOLS_PATH="${HOME}/android-sdk/cmdline-tools/latest/bin"
          SDK_PLATFORM_TOOLS_PATH="${HOME}/android-sdk/platform-tools"
          SDK_EMULATOR_PATH="${HOME}/android-sdk/emulator" # Included for completeness
          echo "$SDK_CMD_TOOLS_PATH" >> $GITHUB_PATH
          echo "$SDK_PLATFORM_TOOLS_PATH" >> $GITHUB_PATH
          echo "$SDK_EMULATOR_PATH" >> $GITHUB_PATH
          export PATH="$SDK_CMD_TOOLS_PATH:$SDK_PLATFORM_TOOLS_PATH:$SDK_EMULATOR_PATH:$PATH"
          mkdir -p ${HOME}/android-sdk/cmdline-tools
          CMDTOOLS_VERSION_ZIP="commandlinetools-linux-11076708_latest.zip"
          echo "Downloading Android Command-line Tools: ${CMDTOOLS_VERSION_ZIP}"
          wget --quiet "https://dl.google.com/android/repository/${CMDTOOLS_VERSION_ZIP}" -O cmdline-tools.zip
          echo "Unzipping Command-line Tools..."
          unzip -q cmdline-tools.zip -d ${HOME}/android-sdk/cmdline-tools
          mv ${HOME}/android-sdk/cmdline-tools/cmdline-tools ${HOME}/android-sdk/cmdline-tools/latest
          rm cmdline-tools.zip
          echo "Command-line Tools installed to ${HOME}/android-sdk/cmdline-tools/latest"
          echo "Verifying sdkmanager..."
          which sdkmanager
          sdkmanager --version || echo "sdkmanager --version failed"
          echo "Accepting SDK licenses..."
          yes | sdkmanager --licenses > /dev/null || echo "Failed to accept licenses, retrying with --sdk_root"
          yes | sdkmanager --licenses --sdk_root="${ANDROID_HOME}" > /dev/null || echo "Failed to accept licenses with --sdk_root"
          echo "Installing SDK packages..."
          sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools" > /dev/null || echo "Failed to install SDK packages"
          echo "SDK Setup Complete. Installed packages:"
          sdkmanager --list_installed || echo "sdkmanager --list_installed failed"
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT || format('{0}/android-sdk', env.HOME) }}
          
      - name: Decode Keystore and Set Up Signing Variables
        run: |
          echo "Decoding keystore..."
          # Define a consistent path for the keystore file in the runner's environment
          KEYSTORE_FILE_PATH_IN_RUNNER="${HOME}/signing_keystore.jks" # Using .jks as it's common, adjust if yours is .keystore
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 --decode > $KEYSTORE_FILE_PATH_IN_RUNNER
          
          echo "Setting up signing environment variables for Gradle..."
          # These environment variable names will be read by app/build.gradle.kts
          echo "SIGNING_KEYSTORE_FILE_PATH=$KEYSTORE_FILE_PATH_IN_RUNNER" >> $GITHUB_ENV
          echo "SIGNING_KEYSTORE_PASSWORD_ENV=${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "SIGNING_KEY_ALIAS_ENV=${{ secrets.SIGNING_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "SIGNING_KEY_PASSWORD_ENV=${{ secrets.SIGNING_KEY_PASSWORD }}" >> $GITHUB_ENV
          
          echo "Keystore decoded and signing variables set."
          # Verify file exists
          if [ -f "$KEYSTORE_FILE_PATH_IN_RUNNER" ]; then
            echo "Keystore file created at $KEYSTORE_FILE_PATH_IN_RUNNER"
          else
            echo "ERROR: Keystore file NOT created at $KEYSTORE_FILE_PATH_IN_RUNNER"
            exit 1 # Fail the job if keystore is not created
          fi
        # Corrected 'if' condition syntax
        if: ${{ secrets.SIGNING_KEYSTORE_BASE64 != '' }}

      - name: Setup Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Signed Release APK
        run: |
          echo "Starting Release Build..."
          ./gradlew clean assembleRelease
        env:
          # ANDROID_SDK_ROOT and ANDROID_HOME are already in GITHUB_ENV
          # The SIGNING_... variables are also set in GITHUB_ENV from the previous step
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_HOME }}

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-release-apk
          path: app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error
